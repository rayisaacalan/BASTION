% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/graphDeath.R
\name{graphDeath}
\alias{graphDeath}
\title{Perform a cluster death operation (merge an existing cluster)}
\usage{
graphDeath(graph, membership, full_graph)
}
\arguments{
\item{graph}{An object of class 'graph' from the \code{\link[igraph]{igraph}} package}

\item{membership}{A vector of integers of length N with k unique integers (1 < k <= N) which map each vertex to a cluster}

\item{full_graph}{An object of class 'graph' from the \code{\link[igraph]{igraph}} package; 'graph' should be a subgraph of full_graph}
}
\value{
A list containing two elements:
\item{graph}{The input graph with 1 additional active edge}
\item{membership}{A vector of integers of length N with k - 1 unique integers which map each vertex to a cluster}
\item{new_clust_ids}{Vertex keys of the vertices belonging to the newly unified cluster}
\item{old_clust_ids}{Vertex keys of the vertices belonging only to the cluster being merged which has a higher number}
}
\description{
\code{graphDeath} takes in a spanning forest graph with k disconnected components corresponding to
the vector of cluster assignments 'membership' and merges two connected clusters together. It requires the original
graph (as generated by \code{\link{constructGraph}}) to determine what edges in the modified graph are available to
be returned in order to connect disconnected components. From the list of edges which connect vertices belonging
to different clusters (see \code{\link{edgeBetweenClust}}), one is uniformly randomly selected and returned to
the output graph, reducing the number of clusters by one.
}
\examples{
set.seed(1)
coords = data.frame(lon = rnorm(50), lat = rnorm(50))
g = constructGraph(coords, 6)
clust_out = constructClusters(g, 8, minclust = 3)
plot(clust_out$spanning_forest,
     layout = as.matrix(coords),
     vertex.color = clust_out$membership,
     edge.arrow.mode = 0)
g_7_clusters = graphDeath(clust_out$spanning_forest,
                          clust_out$membership,
                          g)
plot(g_7_clusters$graph,
     layout = as.matrix(coords),
     vertex.color = g_7_clusters$membership,
     edge.arrow.mode = 0)
}
\references{
Luo, Z.T. (*), Sang, H. and Mallick, B.K. (2021), BAST: Bayesian Additive Regression Spanning Trees
for Complex Constrained Domain

Luo, Z.T. (*), Sang, H. and Mallick, B.K. (2021), A Bayesian Contiguous Partitioning Method for
Learning Clustered Latent Variables, Journal of Machine Learning Research, 22, 1-52.
}
\seealso{
\code{\link{constructClusters}}, \code{\link{graphBirth}}, \code{\link{graphChange}}, \code{\link{graphHyper}}
}
